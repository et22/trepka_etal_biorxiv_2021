function [negloglike, nlls, pl, pr]=funIigayaExact(xpar,dat)
alpha_fast_weight=xpar(1);
alpha_slow_weight=xpar(2);

nt=size(dat,1);
negloglike=0;

i_right = 1;
i_left = 1;
i_right_slow = 0;
i_left_slow = 0;
i_right_fast1 = 0;
i_left_fast1 = 0;
i_right_fast2 = 0;
i_left_fast2 = 0;
fast_t1 = 2;
fast_t2 = 20;
slow_t = 100;

pl = zeros(1,nt);
pr = zeros(1,nt);
nlls = zeros(1,nt);

for k=1:nt
    pright=i_right/(i_right+i_left);
    pleft=1-pright;
    
    if pright==0
        pright=realmin;   % Smallest positive normalized floating point number, because otherwise log(zero) is -Inf
    end
    if pleft==0
        pleft=realmin;
    end
    
    %compare with actual choice to calculate log-likelihood
    if dat(k,1)==1
        logp=log(pright);
    elseif dat(k,1)==-1
        logp=log(pleft);
    else
        logp=0;
    end
    nlls(k) = -logp;
    negloglike=negloglike-logp;  % calculate log likelihood
    
    % update value for the performed action
    if dat(k,1)==1      %chose right
        i_right_fast1=IigayaUpdateStep(t_fast1,i_right_fast1,dat(k,2));
        i_left_fast1 =IigayaUpdateStep(t_fast1,i_left_fast1,0); 
        i_right_fast2 = IigayaUpdateStep(t_fast2,i_right_fast2,dat(k,2)); 
        i_left_fast2 = IigayaUpdateStep(t_fast2,i_left_fast2,0); 
        i_right_slow = IigayaUpdateStep(t_fast1,i_left_fast1,0); 
        i_left_slow = IigayaUpdateStep(t_slow,i_left_slow,0); 
    elseif dat(k,1)==-1 %chose left
        if dat(k,2)>0
            v_left=v_left+alpha*(dat(k,2)-v_left);
        end
        v_right = v_right + decay_rate*(decay_base-v_right);
    end
end

end